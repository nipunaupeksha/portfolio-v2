{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/pensieve/leetcode-0002",
    "result": {"data":{"markdownRemark":{"html":"<h2>Description</h2>\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 700px; \"\n    >\n      <a\n    class=\"gatsby-resp-image-link\"\n    href=\"/static/521af98c10c3b1e330ad5956376383ed/f3baa/problem.png\"\n    style=\"display: block\"\n    target=\"_blank\"\n    rel=\"noopener\"\n  >\n    <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 55.99999999999999%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'225\\'%20viewBox=\\'0%200%20400%20225\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M0%20113v112h401V0H0v113M94%209c-16%209-13%2032%205%2037%209%202%2020-4%2023-14l1-4h27c24%200%2027%200%2026%202l4-1c3-1%203-1%204%204s9%2011%2014%2013c11%202%2021-4%2024-15l1-4h26c25%200%2029%200%2027%202l2%201c5-2%205-2%206%202%203%2014%2023%2019%2033%209%2012-13%204-34-14-34-9%200-19%208-19%2014%200%204-1%204-4%202-4-1-4-1-3%201l-27%201h-27l-1-4c-5-19-34-18-38%200-1%204-1%204-6%202l-2%201c1%201-6%201-26%201h-27l-1-4C119%209%20104%203%2094%209m1%202c-13%206-12%2025%201%2031%209%204%2019%201%2023-8%207-15-8-30-24-23m100%200c-13%206-12%2025%201%2031%209%204%2019%201%2023-8%207-15-8-30-24-23m100%200c-13%206-12%2025%201%2031%209%204%2019%201%2023-8%207-15-8-30-24-23M94%2084c-16%209-13%2032%205%2037%209%202%2020-4%2023-14l1-4h27c24%200%2027%200%2026%202l4-1c3-1%203-1%204%204s9%2011%2014%2013c11%202%2021-4%2024-15l1-4h26c25%200%2029%200%2027%202l2%201c5-2%205-2%206%202%203%2014%2023%2019%2033%209%2012-13%204-34-14-34-9%200-19%208-19%2014%200%204-1%204-4%202-4-1-4-1-3%201l-27%201h-27l-1-4c-5-19-34-18-38%200-1%204-1%204-6%202l-2%201c1%201-6%201-26%201h-27l-1-4c-3-12-18-18-28-12m1%202c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23m100%200c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23m100%200c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23M52%20151l1%202c3%201%20301%200%20300-1%200-2-300-2-301-1m42%2033c-17%2010-12%2035%207%2037%2010%201%2018-5%2021-14l1-4h27c24%200%2027%200%2026%202l4-1c3-1%203-1%204%204l4%206c10%2012%2030%208%2034-8l1-4h26c25%200%2029%200%2027%202l2%201c5-2%205-2%206%202%203%2013%2022%2019%2032%209%2014-12%205-34-13-34-9%200-19%208-19%2014%200%204-1%204-4%202-4-1-4-1-3%201l-27%201h-27l-1-4c-5-19-34-18-38%200-1%204-1%204-6%202l-2%201c1%201-6%201-26%201h-27l-1-4c-3-12-18-18-28-12m1%202c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23m100%200c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23m100%200c-6%203-8%207-8%2016%200%206%200%207%202%2010%208%2010%2025%208%2030-3%207-15-8-30-24-23\\'%20fill=\\'%2364ffda\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image\"\n        alt=\"problem\"\n        title=\"problem\"\n        src=\"/static/521af98c10c3b1e330ad5956376383ed/39600/problem.png\"\n        srcset=\"/static/521af98c10c3b1e330ad5956376383ed/1aaec/problem.png 175w,\n/static/521af98c10c3b1e330ad5956376383ed/98287/problem.png 350w,\n/static/521af98c10c3b1e330ad5956376383ed/39600/problem.png 700w,\n/static/521af98c10c3b1e330ad5956376383ed/57cd1/problem.png 1050w,\n/static/521af98c10c3b1e330ad5956376383ed/f3baa/problem.png 1280w\"\n        sizes=\"(max-width: 700px) 100vw, 700px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n        decoding=\"async\"\n      />\n  </a>\n    </span></p>\n<div class=\"gatsby-highlight\" data-language=\"example\"><pre class=\"language-example\"><code class=\"language-example\">Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"example\"><pre class=\"language-example\"><code class=\"language-example\">Input: l1 = [0], l2 = [0]\nOutput: [0]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"example\"><pre class=\"language-example\"><code class=\"language-example\">Input: l1 = [9,9,9,9,9,9,9] l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]</code></pre></div>\n<p><strong>Constraints</strong></p>\n<ul>\n<li>The number of nodes in each linked list in the range <code class=\"language-text\">[1,100]</code>.</li>\n<li><code class=\"language-text\">0 &lt;= Node.val &lt;= 9</code></li>\n<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n<h2>Solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ListNode</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListNode</span> curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> carry<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l1<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l1<span class=\"token punctuation\">.</span>val<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>l2<span class=\"token punctuation\">.</span>val<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> carry <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n            carry <span class=\"token operator\">=</span> sum<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                l1<span class=\"token operator\">=</span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n             l2<span class=\"token operator\">=</span>l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>   \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"LeetCode 2 - Add Two Numbers","description":"Solution for LeetCode Problem 2","date":"2022-08-09","slug":"/pensieve/leetcode-0002","tags":["DSA","Java"]}}},"pageContext":{}},
    "staticQueryHashes": ["3115057458"]}